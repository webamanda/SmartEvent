(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/fire/auth'), require('firebaseui'), require('firebase/auth'), require('firebase/app'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('firebaseui-angular', ['exports', '@angular/core', '@angular/fire/auth', 'firebaseui', 'firebase/auth', 'firebase/app', '@angular/common'], factory) :
    (global = global || self, factory(global['firebaseui-angular'] = {}, global.ng.core, global.ng.fire.auth, global.firebaseui$1, null, global.firebaseOriginal, global.ng.common));
}(this, function (exports, core, auth, firebaseui$1, auth$1, firebaseOriginal, common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FirebaseuiAngularLibraryService = /** @class */ (function () {
        function FirebaseuiAngularLibraryService(angularFireAuth) {
            // store the firebaseui instance on the window object to prevent double initialization
            if (!((/** @type {?} */ (window))).firebaseUiInstance) {
                ((/** @type {?} */ (window))).firebaseUiInstance = new firebaseui$1.auth.AuthUI(angularFireAuth.auth);
            }
            this.firebaseUiInstance = (/** @type {?} */ (((/** @type {?} */ (window))).firebaseUiInstance));
        }
        FirebaseuiAngularLibraryService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FirebaseuiAngularLibraryService.ctorParameters = function () { return [
            { type: auth.AngularFireAuth }
        ]; };
        return FirebaseuiAngularLibraryService;
    }());

    var __assign = (this && this.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    var FirebaseuiAngularLibraryComponent = /** @class */ (function () {
        function FirebaseuiAngularLibraryComponent(angularFireAuth, _firebaseUiConfig, _firebaseUiConfig_Feature, ngZone, firebaseUIService) {
            this.angularFireAuth = angularFireAuth;
            this._firebaseUiConfig = _firebaseUiConfig;
            this._firebaseUiConfig_Feature = _firebaseUiConfig_Feature;
            this.ngZone = ngZone;
            this.firebaseUIService = firebaseUIService;
            this.signInSuccessWithAuthResultCallback = new core.EventEmitter(); // tslint:disable-line
            // tslint:disable-line
            this.signInFailureCallback = new core.EventEmitter(); // tslint:disable-line
        }
        Object.defineProperty(FirebaseuiAngularLibraryComponent.prototype, "firebaseUiConfig", {
            get: /**
             * @return {?}
             */
            function () {
                return (/** @type {?} */ (__assign({}, this._firebaseUiConfig, this._firebaseUiConfig_Feature)));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.subscription = this.angularFireAuth.authState.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if ((value && value.isAnonymous) || !value) {
                    if (_this.firebaseUiConfig.signInOptions.length !== 0) {
                        _this.firebaseUIPopup();
                    }
                    else {
                        throw new Error('There must be at least one AuthProvider.');
                    }
                }
            }));
        };
        /**
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (!!this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        /**
         * @private
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.prototype.getUIAuthConfig = /**
         * @private
         * @return {?}
         */
        function () {
            if (!((/** @type {?} */ (this.firebaseUiConfig))).callbacks) {
                this._firebaseUiConfig[FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS] = true;
                ((/** @type {?} */ (this._firebaseUiConfig))).callbacks = this.getCallbacks();
            }
            return ((/** @type {?} */ (this.firebaseUiConfig)));
        };
        /**
         * @private
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.prototype.firebaseUIPopup = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var firebaseUiInstance = this.firebaseUIService.firebaseUiInstance;
            /** @type {?} */
            var uiAuthConfig = this.getUIAuthConfig();
            // Check if callbacks got computed to reset them again after providing the to firebaseui.
            // Necessary for allowing updating the firebaseui config during runtime.
            /** @type {?} */
            var resetCallbacks = false;
            if (uiAuthConfig[FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS]) {
                resetCallbacks = true;
                delete uiAuthConfig[FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS];
            }
            // show the firebaseui
            firebaseUiInstance.start('#firebaseui-auth-container', uiAuthConfig);
            if (resetCallbacks) {
                ((/** @type {?} */ (this._firebaseUiConfig))).callbacks = null;
            }
        };
        /**
         * @private
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.prototype.getCallbacks = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var signInSuccessWithAuthResult = (/**
             * @param {?} authResult
             * @param {?} redirectUrl
             * @return {?}
             */
            function (authResult, redirectUrl) {
                _this.ngZone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.signInSuccessWithAuthResultCallback.emit({
                        authResult: authResult,
                        redirectUrl: redirectUrl
                    });
                }));
                return _this.firebaseUiConfig.signInSuccessUrl;
            });
            /** @type {?} */
            var signInFailureCallback = (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.ngZone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.signInFailureCallback.emit({
                        code: error.code,
                        credential: error.credential
                    });
                }));
                return Promise.reject();
            });
            return {
                signInSuccessWithAuthResult: signInSuccessWithAuthResult,
                signInFailure: signInFailureCallback,
            };
        };
        FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS = 'COMPUTED_CALLBACKS';
        FirebaseuiAngularLibraryComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'firebase-ui',
                        template: '<div id="firebaseui-auth-container"></div>'
                    }] }
        ];
        /** @nocollapse */
        FirebaseuiAngularLibraryComponent.ctorParameters = function () { return [
            { type: auth.AngularFireAuth },
            { type: undefined, decorators: [{ type: core.Inject, args: ['firebaseUIAuthConfig',] }] },
            { type: undefined, decorators: [{ type: core.Inject, args: ['firebaseUIAuthConfigFeature',] }] },
            { type: core.NgZone },
            { type: FirebaseuiAngularLibraryService }
        ]; };
        FirebaseuiAngularLibraryComponent.propDecorators = {
            signInSuccessWithAuthResultCallback: [{ type: core.Output, args: ['signInSuccessWithAuthResult',] }],
            signInFailureCallback: [{ type: core.Output, args: ['signInFailure',] }]
        };
        return FirebaseuiAngularLibraryComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var firebase = firebaseOriginal;
    /** @type {?} */
    var firebaseui = firebaseui$1;
    var FirebaseUISignInSuccessWithAuthResult = /** @class */ (function () {
        function FirebaseUISignInSuccessWithAuthResult() {
        }
        return FirebaseUISignInSuccessWithAuthResult;
    }());
    var FirebaseUISignInFailure = /** @class */ (function () {
        function FirebaseUISignInFailure() {
        }
        return FirebaseUISignInFailure;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FirebaseUIModule = /** @class */ (function () {
        function FirebaseUIModule() {
        }
        /**
         * @param {?} firebaseUiAuthConfig
         * @return {?}
         */
        FirebaseUIModule.forRoot = /**
         * @param {?} firebaseUiAuthConfig
         * @return {?}
         */
        function (firebaseUiAuthConfig) {
            return {
                ngModule: FirebaseUIModule,
                providers: [
                    { provide: 'firebaseUIAuthConfig', useValue: firebaseUiAuthConfig },
                    { provide: 'firebaseUIAuthConfigFeature', useValue: {} }
                ]
            };
        };
        /**
         * @param {?} firebaseUIAuthConfig
         * @return {?}
         */
        FirebaseUIModule.forFeature = /**
         * @param {?} firebaseUIAuthConfig
         * @return {?}
         */
        function (firebaseUIAuthConfig) {
            return {
                ngModule: FirebaseUIModule,
                providers: [
                    { provide: 'firebaseUIAuthConfigFeature', useValue: firebaseUIAuthConfig }
                ]
            };
        };
        FirebaseUIModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [FirebaseuiAngularLibraryComponent],
                        providers: [FirebaseuiAngularLibraryService],
                        exports: [FirebaseuiAngularLibraryComponent]
                    },] }
        ];
        return FirebaseUIModule;
    }());

    exports.FirebaseUIModule = FirebaseUIModule;
    exports.FirebaseUISignInFailure = FirebaseUISignInFailure;
    exports.FirebaseUISignInSuccessWithAuthResult = FirebaseUISignInSuccessWithAuthResult;
    exports.FirebaseuiAngularLibraryComponent = FirebaseuiAngularLibraryComponent;
    exports.FirebaseuiAngularLibraryService = FirebaseuiAngularLibraryService;
    exports.firebase = firebase;
    exports.firebaseui = firebaseui;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=firebaseui-angular.umd.js.map
