{"version":3,"sources":["ng://firebaseui-angular/lib/firebaseui-angular-library.service.ts","ng://firebaseui-angular/lib/firebaseui-angular-library.component.ts","ng://firebaseui-angular/lib/firebaseui-angular-library.helper.ts","ng://firebaseui-angular/lib/firebaseui-angular-library.module.ts"],"names":["FirebaseuiAngularLibraryService","angularFireAuth","firebaseUiInstance","firebaseui.auth","AuthUI","auth","this","Injectable","AngularFireAuth","FirebaseuiAngularLibraryComponent","_firebaseUiConfig","_firebaseUiConfig_Feature","ngZone","firebaseUIService","signInSuccessWithAuthResultCallback","EventEmitter","signInFailureCallback","Object","defineProperty","prototype","__assign","ngOnInit","_this","subscription","authState","subscribe","value","isAnonymous","firebaseUiConfig","signInOptions","length","Error","firebaseUIPopup","ngOnDestroy","unsubscribe","getUIAuthConfig","callbacks","COMPUTED_CALLBACKS","getCallbacks","uiAuthConfig","resetCallbacks","start","signInSuccessWithAuthResult","authResult","redirectUrl","run","emit","signInSuccessUrl","signInFailure","error","code","credential","Promise","reject","Component","args","selector","template","Inject","NgZone","Output","firebase","firebaseOriginal","firebaseui","firebaseuiOriginal","FirebaseUISignInSuccessWithAuthResult","FirebaseUIModule","forRoot","firebaseUiAuthConfig","ngModule","providers","provide","useValue","forFeature","firebaseUIAuthConfig","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport {AngularFireAuth} from '@angular/fire/auth';\nimport * as firebaseui from 'firebaseui';\n\n@Injectable()\nexport class FirebaseuiAngularLibraryService {\n  public firebaseUiInstance: firebaseui.auth.AuthUI;\n\n  constructor(angularFireAuth: AngularFireAuth) {\n    // store the firebaseui instance on the window object to prevent double initialization\n    if (!(<any>window).firebaseUiInstance) {\n      (<any>window).firebaseUiInstance = new firebaseui.auth.AuthUI(angularFireAuth.auth);\n    }\n    this.firebaseUiInstance = (<any>window).firebaseUiInstance as firebaseui.auth.AuthUI;\n  }\n}\n","import {Component, EventEmitter, Inject, NgZone, OnDestroy, OnInit, Output} from '@angular/core';\nimport {AngularFireAuth} from '@angular/fire/auth';\nimport {Subscription} from 'rxjs';\nimport {\n  FirebaseUISignInFailure,\n  FirebaseUISignInSuccessWithAuthResult,\n  NativeFirebaseUIAuthConfig,\n} from './firebaseui-angular-library.helper';\nimport * as firebaseui from 'firebaseui';\nimport {User} from 'firebase/app';\nimport {FirebaseuiAngularLibraryService} from './firebaseui-angular-library.service';\nimport 'firebase/auth';\nimport UserCredential = firebase.auth.UserCredential;\n\n@Component({\n  selector: 'firebase-ui',\n  template: '<div id=\"firebaseui-auth-container\"></div>'\n})\nexport class FirebaseuiAngularLibraryComponent implements OnInit, OnDestroy {\n  private static readonly COMPUTED_CALLBACKS = 'COMPUTED_CALLBACKS';\n\n  @Output('signInSuccessWithAuthResult') signInSuccessWithAuthResultCallback: EventEmitter<FirebaseUISignInSuccessWithAuthResult> = new EventEmitter(); // tslint:disable-line\n  @Output('signInFailure') signInFailureCallback: EventEmitter<FirebaseUISignInFailure> = new EventEmitter(); // tslint:disable-line\n\n  private subscription: Subscription;\n\n  constructor(private angularFireAuth: AngularFireAuth,\n              @Inject('firebaseUIAuthConfig') private _firebaseUiConfig: NativeFirebaseUIAuthConfig,\n              @Inject('firebaseUIAuthConfigFeature') private _firebaseUiConfig_Feature: NativeFirebaseUIAuthConfig,\n              private ngZone: NgZone,\n              private firebaseUIService: FirebaseuiAngularLibraryService) {\n  }\n\n  get firebaseUiConfig(): NativeFirebaseUIAuthConfig {\n    return {\n      ...this._firebaseUiConfig,\n      ...this._firebaseUiConfig_Feature\n    } as NativeFirebaseUIAuthConfig;\n  }\n\n  ngOnInit(): void {\n    this.subscription = this.angularFireAuth.authState.subscribe((value: User) => {\n      if ((value && value.isAnonymous) || !value) {\n        if (this.firebaseUiConfig.signInOptions.length !== 0) {\n          this.firebaseUIPopup();\n        } else {\n          throw new Error('There must be at least one AuthProvider.');\n        }\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (!!this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  private getUIAuthConfig(): NativeFirebaseUIAuthConfig {\n    if (!(this.firebaseUiConfig as NativeFirebaseUIAuthConfig).callbacks) {\n      this._firebaseUiConfig[FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS] = true;\n      (this._firebaseUiConfig as NativeFirebaseUIAuthConfig).callbacks = this.getCallbacks();\n    }\n    return (this.firebaseUiConfig as NativeFirebaseUIAuthConfig);\n  }\n\n  private firebaseUIPopup() {\n    const firebaseUiInstance = this.firebaseUIService.firebaseUiInstance;\n    const uiAuthConfig = this.getUIAuthConfig();\n\n    // Check if callbacks got computed to reset them again after providing the to firebaseui.\n    // Necessary for allowing updating the firebaseui config during runtime.\n    let resetCallbacks = false;\n    if (uiAuthConfig[FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS]) {\n      resetCallbacks = true;\n      delete uiAuthConfig[FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS];\n    }\n\n    // show the firebaseui\n    firebaseUiInstance.start('#firebaseui-auth-container', uiAuthConfig);\n\n    if (resetCallbacks) {\n      (this._firebaseUiConfig as NativeFirebaseUIAuthConfig).callbacks = null;\n    }\n  }\n\n  private getCallbacks(): any {\n    const signInSuccessWithAuthResult = (authResult: UserCredential, redirectUrl) => {\n      this.ngZone.run(() => {\n        this.signInSuccessWithAuthResultCallback.emit({\n          authResult,\n          redirectUrl\n        });\n      });\n      return this.firebaseUiConfig.signInSuccessUrl;\n    };\n\n    const signInFailureCallback = (error: firebaseui.auth.AuthUIError) => {\n      this.ngZone.run(() => {\n        this.signInFailureCallback.emit({\n          code: error.code,\n          credential: error.credential\n        });\n      });\n      return Promise.reject();\n    };\n\n    return {\n      signInSuccessWithAuthResult: signInSuccessWithAuthResult,\n      signInFailure: signInFailureCallback,\n    };\n  }\n}\n","/*\n * Created by Raphael Jenni\n * Copyright (c) 2017 Raphael Jenni\n */\n\nimport * as firebaseOriginal from 'firebase/app';\nimport UserCredential = firebase.auth.UserCredential;\nimport * as firebaseuiOriginal from 'firebaseui';\n\nexport const firebase = firebaseOriginal;\nexport const firebaseui = firebaseuiOriginal;\n\nexport type NativeFirebaseUIAuthConfig = firebaseuiOriginal.auth.Config;\n\n\nexport class FirebaseUISignInSuccessWithAuthResult {\n  authResult: UserCredential;\n  redirectUrl: string;\n}\n\nexport class FirebaseUISignInFailure {\n  code: string;\n  credential: firebaseOriginal.auth.AuthCredential;\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {FirebaseuiAngularLibraryComponent} from './firebaseui-angular-library.component';\nimport {CommonModule} from '@angular/common';\nimport {NativeFirebaseUIAuthConfig} from './firebaseui-angular-library.helper';\nimport {FirebaseuiAngularLibraryService} from './firebaseui-angular-library.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [FirebaseuiAngularLibraryComponent],\n  providers: [FirebaseuiAngularLibraryService],\n  exports: [FirebaseuiAngularLibraryComponent]\n})\nexport class FirebaseUIModule {\n  static forRoot(firebaseUiAuthConfig: NativeFirebaseUIAuthConfig): ModuleWithProviders {\n    return {\n      ngModule: FirebaseUIModule,\n      providers: [\n        {provide: 'firebaseUIAuthConfig', useValue: firebaseUiAuthConfig},\n        {provide: 'firebaseUIAuthConfigFeature', useValue: {}}\n      ]\n    };\n  }\n\n  static forFeature(firebaseUIAuthConfig: NativeFirebaseUIAuthConfig | any): ModuleWithProviders {\n    return {\n      ngModule: FirebaseUIModule,\n      providers: [\n        {provide: 'firebaseUIAuthConfigFeature', useValue: firebaseUIAuthConfig}\n      ]\n    };\n  }\n}\n"]}